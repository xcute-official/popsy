// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}




























model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  nickname String?
  username String? @unique
  email String? 
  emailVerified DateTime?
  image String?
  hashedPassword String?
  salt String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversationsIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationsIds], references: [id])
  seenMessagesIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])
  accounts Account[]
  messages Message[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  comments Comment[]
  posts Post[]
}
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?


  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  messagesIds String[] @db.ObjectId
  messages Message[]
  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])  
}
model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])
  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
















model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  slug String @unique
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body Content? 
  metrics Metrics?
  comments Comment[]
}
model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId @unique
  post Post @relation(fields: [postId], references: [id])
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  parentId String? @db.ObjectId
  parent Comment? @relation("ParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("ParentComment")
  text String
  createdAt DateTime @default(now())
}


model Content {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  description String?
  content Json?
  name String?
  image String?
  tags String[]
  category String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId String @db.ObjectId @unique
  post Post @relation(fields: [postId], references: [id])
}


model Metrics {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId @unique
  post Post @relation(fields: [postId], references: [id])
  likes Int @default(0)
  dislikes Int @default(0)
  comments Int @default(0)
}







model EmailVerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}
model PasswordResetToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}


model TwoFactorToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}
model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}



